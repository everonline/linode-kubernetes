name: Cluster Deployment

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  terraform-actions:
    name: Workflo
    runs-on: ubuntu-latest
    environment: linode

    steps:

    - name: Checkout Repository
      uses: actions/checkout@master

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Fmt
      id: fmt
      run: terraform fmt -check -diff
      continue-on-error: true

    - name: Setup Terraform Backend
      id: backend
      run: |
        cat > backend.tf << EOF
        terraform {
          cloud {
            organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"

            workspaces {
              name = "${{ secrets.TF_CLOUD_WORKSPACE }}"
            }
          }
        }
        EOF

    #- name: Setup Terraform Export
    #  id: export
    #  run: export KUBE_CONFIG_PATH=kube-config

    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: true

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true

    - name: Terraform State
      id: state
      run: terraform state rm [helm_release.metrics_server]

    - name: Terraform Plan
      id: plan
      env:
        LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply On Push
      env:
        LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

    - name: Comment On Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        format_out: ${{ steps.fmt.outputs.stdout }}
        format_err: ${{ steps.fmt.outputs.stderr }}
        init_out: ${{ steps.init.outputs.stdout }}
        init_err: ${{ steps.init.outputs.stderr }}
        validate_out: ${{ steps.validate.outputs.stdout }}
        validate_err: ${{ steps.validate.outputs.stderr }}
        plan: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const CODE_BLOCK = '```';
          const fmt_result = '${{ steps.fmt.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const init_result = '${{ steps.init.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const validate_result = '${{ steps.validate.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const plan_result = '${{ steps.plan.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';

          const output = `
          ### ${ fmt_result } Terraform Format and Style üé®
          <details><summary>Logs</summary>
          Output

          ${ CODE_BLOCK }diff
          ${ process.env.format_out }
          ${ CODE_BLOCK }

          Errors

          ${ CODE_BLOCK }
          ${ process.env.format_err }
          ${ CODE_BLOCK }
          </details> <!-- End Format Logs -->

          ### ${ init_result } Terraform Initialization ‚öôÔ∏è
          <details><summary>Logs</summary>
          Output

          ${ CODE_BLOCK }
          ${ process.env.init_out }
          ${ CODE_BLOCK }

          Errors

          ${ CODE_BLOCK }
          ${ process.env.init_err }
          ${ CODE_BLOCK }
          </details> <!-- End Init Logs -->

          ### ${ validate_result } Terraform Validation ü§ñ
          <details><summary>Logs</summary>
          Output

          ${ CODE_BLOCK }
          ${ process.env.validate_out }
          ${ CODE_BLOCK }

          Errors

          ${ CODE_BLOCK }
          ${ process.env.validate_err }
          ${ CODE_BLOCK }
          </details> <!-- End Validate Logs -->

          ### ${ plan_result } Terraform Plan üìñ
          <details><summary>Logs</summary>

          ${ CODE_BLOCK }terraform
          ${ process.env.plan }
          ${ CODE_BLOCK }
          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: 'End results'
      shell: bash
      run: |
        echo fmt
        test ${{ steps.fmt.outputs.exitcode }} -eq 0
        echo init
        test ${{ steps.init.outputs.exitcode }} -eq 0
        echo validate
        test ${{ steps.validate.outputs.exitcode }} -eq 0
